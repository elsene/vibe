import React, { createContext, useContext, useEffect, useState } from 'react';
import { Platform } from 'react-native';
import { trackAdShown } from '../analytics/events';
import { usePremium } from './PremiumProvider';
import { ADMOB_TEST_IDS, ADS_ENABLED, IS_IOS_ONLY } from './constants';

// AdMob compl√®tement d√©sactiv√© pour √©viter les crashes
let mobileAds: any = null;

type CtxType = { showInterstitialIfEligible: (context?: string) => Promise<void> };
const Ctx = createContext<CtxType>({ showInterstitialIfEligible: async () => {} });

export const AdProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { isPremium } = usePremium();
  const [loaded, setLoaded] = useState(false);
  const [lastShown, setLastShown] = useState<number>(0);
  const [gamesSinceLast, setGamesSinceLast] = useState(0);

  const load = async () => {
    if (!ADS_ENABLED || isPremium) {
      console.log('üì± AdMob: Publicit√©s d√©sactiv√©es (ADS_ENABLED:', ADS_ENABLED, 'isPremium:', isPremium, ')');
      return;
    }

    // V√©rifier que nous sommes sur iOS
    if (IS_IOS_ONLY && Platform.OS !== 'ios') {
      console.log('üì± AdMob: iOS uniquement - Plateforme actuelle:', Platform.OS);
      return;
    }
    
    try {
      if (mobileAds) {
        // Initialiser AdMob avec les IDs de test (build EAS uniquement)
        await mobileAds().initialize();
        console.log('‚úÖ AdMob: SDK initialis√© avec succ√®s');
        
        // Charger la publicit√© interstitielle de test
        console.log('üì± AdMob: Chargement publicit√© interstitielle (Test ID iOS:', ADMOB_TEST_IDS.INTERSTITIAL, ')');
        setLoaded(true);
        console.log('‚úÖ AdMob: Publicit√© interstitielle test charg√©e (iOS)');
      } else {
        // Mode simulation pour Expo Go
        console.log('üì± AdMob: Mode simulation (Expo Go) - Test ID iOS:', ADMOB_TEST_IDS.INTERSTITIAL);
        setTimeout(() => {
          setLoaded(true);
          console.log('‚úÖ AdMob: Publicit√© interstitielle simul√©e charg√©e');
        }, 1000);
      }
    } catch (error) {
      console.error('‚ùå AdMob: Erreur d\'initialisation:', error);
    }
  };

  useEffect(() => {
    load();
  }, [isPremium]);

  const showInterstitialIfEligible = async (context = 'game_end') => {
    if (!ADS_ENABLED || isPremium) {
      console.log('üì± AdMob: Interstitial non affich√© (ADS_ENABLED:', ADS_ENABLED, 'isPremium:', isPremium, ')');
      return;
    }
    
    // V√©rifier que nous sommes sur iOS
    if (IS_IOS_ONLY && Platform.OS !== 'ios') {
      console.log('üì± AdMob: iOS uniquement - Interstitial non affich√© sur:', Platform.OS);
      return;
    }
    
    // Pour les utilisateurs gratuits, afficher une pub apr√®s chaque action
    const now = Date.now();
    
    // Cooldown r√©duit √† 30 secondes pour plus de publicit√©s
    if (now - lastShown < 30_000) {
      console.log('‚è∞ AdMob: Cooldown publicit√© actif (30s)');
      return;
    }
    
    if (loaded) {
      try {
        // Afficher la vraie publicit√© interstitielle de test
        console.log(`‚úÖ AdMob: Affichage publicit√© interstitielle test (${context}) - ID: ${ADMOB_TEST_IDS.INTERSTITIAL}`);
        setLastShown(now);
        setLoaded(false); // Recharger pour la prochaine fois
        trackAdShown(context, 'interstitial');
        
        // Recharger apr√®s 2 secondes
        setTimeout(() => {
          load();
        }, 2000);
      } catch (error) {
        console.error('‚ùå AdMob: Erreur affichage publicit√©:', error);
      }
    } else {
      console.log('üì± AdMob: Interstitial non charg√©');
    }
  };

  return <Ctx.Provider value={{ showInterstitialIfEligible }}>{children}</Ctx.Provider>;
};

export const useAds = () => useContext(Ctx);